<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>The Registry DSL</title>
		<link rel="stylesheet" type="text/css" href="style.css" />
		<script type="text/javascript" src="jquery-1.2.6.js"></script>
		<script type="text/javascript" src="structuremap.js"></script>
	</head>
	<body>
        <p>The Registry DSL is the recommended way to configure StructureMap, and creating 
            Registry classes is the recommended way of using the Registry DSL.&nbsp; The 
            Registry DSL is mostly a Fluent Interface with some Nested Closure usage.&nbsp; 
            The intent of the Registry DSL is to make the configuration process as error 
            free as possible by using &quot;compiler safe&quot; expressions and defensive programming 
            to point out missing data.&nbsp; With the advent of .Net 3.5, the Registry DSL 
            is now making use of Expressions as well.</p>
        <hr />
        <h2>The Registry Class</h2>
        <p>On all but the smallest systems, the main unit of configuration will probably be 
            the Registry class.&nbsp; Typically, you would subclass the Registry class, then 
            use the Fluent Interface methods exposed by the Registry class to create 
            Container configuration.&nbsp; Here&#39;s a sample Registry class below used to 
            configure different instances of an IRepository interface:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red0\green128\blue0;\red163\green21\blue21;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 RepositoryRegistry\cf0  : \cf4 Registry\par ??\cf0     \{\par ??        \cf3 public\cf0  RepositoryRegistry()\par ??        \{\par ??            \cf5 // First I'll specify the "default" Instance of IRepository\par ??\cf0             ForRequestedType&lt;\cf4 IRepository\cf0 &gt;().TheDefaultIsConcreteType&lt;\cf4 InMemoryRepository\cf0 &gt;();\par ??            \par ??            \cf5 // Now, I'll add three more Instances of IRepository\par ??\cf0             ForRequestedType&lt;\cf4 IRepository\cf0 &gt;().AddInstances(x =&gt;\par ??            \{\par ??                \cf5 // "NorthAmerica" is the concrete type DatabaseRepository with \par ??\cf0                 \cf5 // the connectionString pointed to the NorthAmerica database\par ??\cf0                 x.OfConcreteType&lt;\cf4 DatabaseRepository\cf0 &gt;().WithName(\cf6 "NorthAmerica"\cf0 )\par ??                    .WithCtorArg(\cf6 "connectionString"\cf0 ).EqualTo(\cf6 "database=NorthAmerica"\cf0 );\par ??\par ??                \cf5 // "Asia/Pacific" is the concrete type DatabaseRepository with \par ??\cf0                 \cf5 // the connectionString pointed to the AsiaPacific database\par ??\cf0                 x.OfConcreteType&lt;\cf4 DatabaseRepository\cf0 &gt;().WithName(\cf6 "Asia/Pacific"\cf0 )\par ??                    .WithCtorArg(\cf6 "connectionString"\cf0 ).EqualTo(\cf6 "database=AsiaPacific"\cf0 );\par ??\par ??                \cf5 // Lastly, the "Weird" instance is built by calling a specified \par ??\cf0                 \cf5 // Lambda (an anonymous delegate will work as well).\par ??\cf0                 x.ConstructedBy(() =&gt; \cf4 WeirdLegacyRepository\cf0 .Current).WithName(\cf6 "Weird"\cf0 );\par ??            \});\par ??        \}\par ??    \}}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
                <span style="color: #2b91af;">RepositoryRegistry</span> :
                <span style="color: #2b91af;">Registry</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> 
                RepositoryRegistry()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // First I&#39;ll specify the &quot;default&quot; Instance of IRepository</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ForRequestedType&lt;<span 
                    style="color: #2b91af;">IRepository</span>&gt;().TheDefaultIsConcreteType&lt;<span 
                    style="color: #2b91af;">InMemoryRepository</span>&gt;();</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // Now, I&#39;ll add three more Instances of IRepository</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ForRequestedType&lt;<span 
                    style="color: #2b91af;">IRepository</span>&gt;().AddInstances(x =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// &quot;NorthAmerica&quot; is the concrete type 
                DatabaseRepository with </span>
            </p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// the connectionString pointed to the NorthAmerica 
                database</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.OfConcreteType&lt;<span style="color: #2b91af;">DatabaseRepository</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;NorthAmerica&quot;</span>)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithCtorArg(<span style="color: #a31515;">&quot;connectionString&quot;</span>).EqualTo(<span 
                    style="color: #a31515;">&quot;database=NorthAmerica&quot;</span>);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// &quot;Asia/Pacific&quot; is the concrete type 
                DatabaseRepository with </span>
            </p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// the connectionString pointed to the AsiaPacific 
                database</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.OfConcreteType&lt;<span style="color: #2b91af;">DatabaseRepository</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;Asia/Pacific&quot;</span>)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithCtorArg(<span style="color: #a31515;">&quot;connectionString&quot;</span>).EqualTo(<span 
                    style="color: #a31515;">&quot;database=AsiaPacific&quot;</span>);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// Lastly, the &quot;Weird&quot; instance is built by calling 
                a specified </span>
            </p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// Lambda (an anonymous delegate will work as well).</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ConstructedBy(() =&gt; <span style="color: #2b91af;">WeirdLegacyRepository</span>.Current).WithName(<span 
                    style="color: #a31515;">&quot;Weird&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
        </div>
<!--EndFragment-->
<hr />
        <h4>Applying Registry Classes</h4>
        <p>The next question is &quot;how does my new Registry class get used?&quot;&nbsp; When you 
            set up a Container or ObjectFactory, you need to simply direct the Container to 
            use the configuration in that Registry class.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red0\green0\blue255;\red43\green145\blue175;}??\fs20             \cf3 // Example #1\par ??\cf0             \cf4 var\cf0  container1 = \cf4 new\cf0  \cf5 Container\cf0 (\cf4 new\cf0  \cf5 RepositoryRegistry\cf0 ());\par ??\par ??            \cf3 // Example #2\par ??\cf0             \cf4 var\cf0  container2 = \cf4 new\cf0  \cf5 Container\cf0 (x =&gt;\par ??            \{\par ??                x.AddRegistry&lt;\cf5 RepositoryRegistry\cf0 &gt;();\par ??            \});\par ??\par ??            \cf3 // Example #3\par ??\cf0             \cf5 ObjectFactory\cf0 .Initialize(x =&gt;\par ??            \{\par ??                x.AddRegistry&lt;\cf5 RepositoryRegistry\cf0 &gt;();\par ??            \});}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // Example #1</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> container1 = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">Container</span>(<span style="color: blue;">new</span>
                <span style="color: #2b91af;">RepositoryRegistry</span>());</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // Example #2</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> container2 = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">Container</span>(x =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.AddRegistry&lt;<span style="color: #2b91af;">RepositoryRegistry</span>&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // Example #3</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                ObjectFactory</span>.Initialize(x =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.AddRegistry&lt;<span style="color: #2b91af;">RepositoryRegistry</span>&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        </div>
<!--EndFragment-->
<hr />
        <h4>The Registry DSL Methods</h4>
        <p>The Registry class exposes these methods for configuration.&nbsp; Most of these 
            methods are the root of a Fluent Interface expression.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red43\green145\blue175;\red0\green0\blue255;}??\fs20         \cf3 // Registering Types -- BuildInstancesOf() and ForRequestedType() are Synonyms\par ??\cf0         \cf4 CreatePluginFamilyExpression\cf0 &lt;TPluginType&gt; BuildInstancesOf&lt;TPluginType&gt;();\par ??        \cf4 CreatePluginFamilyExpression\cf0 &lt;TPluginType&gt; ForRequestedType&lt;TPluginType&gt;();\par ??        \par ??        \cf4 GenericFamilyExpression\cf0  ForRequestedType(\cf4 Type\cf0  pluginType);\par ??\par ??        \cf3 // Shortcut for configuring the default configuration of a concrete type\par ??\cf0         \cf4 Registry\cf0 .\cf4 BuildWithExpression\cf0 &lt;T&gt; ForConcreteType&lt;T&gt;();\par ??\par ??        \cf3 // Adding additional Instances of a PluginType\par ??\cf0         \cf4 IsExpression\cf0 &lt;T&gt; InstanceOf&lt;T&gt;();\par ??        \cf4 GenericIsExpression\cf0  InstanceOf(\cf4 Type\cf0  pluginType);\par ??\par ??        \cf3 // Creating or Adding to a Profile\par ??\cf0         \cf4 ProfileExpression\cf0  CreateProfile(\cf5 string\cf0  profileName);\par ??        \cf5 void\cf0  CreateProfile(\cf5 string\cf0  profileName, \cf4 Action\cf0 &lt;\cf4 ProfileExpression\cf0 &gt; action);\par ??\par ??        \cf3 // Interception\par ??\cf0         \cf5 void\cf0  RegisterInterceptor(\cf4 TypeInterceptor\cf0  interceptor);\par ??        \cf4 MatchedTypeInterceptor\cf0  IfTypeMatches(\cf4 Predicate\cf0 &lt;\cf4 Type\cf0 &gt; match);\par ??\par ??        \cf3 // Type Scanning and Auto Registration\par ??\cf0         \cf5 void\cf0  Scan(\cf4 Action\cf0 &lt;\cf4 IAssemblyScanner\cf0 &gt; action);\par ??\par ??        \cf3 // Controlling Setter Injection Behavior\par ??\cf0         \cf4 CreatePluginFamilyExpression\cf0 &lt;TPluginType&gt; FillAllPropertiesOfType&lt;TPluginType&gt;();\par ??        \cf5 void\cf0  SetAllProperties(\cf4 Action\cf0 &lt;\cf4 SetterConvention\cf0 &gt; action);}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Registering Types -- 
                BuildInstancesOf() and ForRequestedType() are Synonyms</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                CreatePluginFamilyExpression</span>&lt;TPluginType&gt; BuildInstancesOf&lt;TPluginType&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                CreatePluginFamilyExpression</span>&lt;TPluginType&gt; ForRequestedType&lt;TPluginType&gt;();</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">GenericFamilyExpression</span> 
                ForRequestedType(<span style="color: #2b91af;">Type</span> pluginType);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Shortcut for 
                configuring the default configuration of a concrete type</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Registry</span>.<span 
                    style="color: #2b91af;">BuildWithExpression</span>&lt;T&gt; ForConcreteType&lt;T&gt;();</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Adding additional 
                Instances of a PluginType</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">IsExpression</span>&lt;T&gt; 
                InstanceOf&lt;T&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">GenericIsExpression</span> 
                InstanceOf(<span style="color: #2b91af;">Type</span> pluginType);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Creating or Adding to 
                a Profile</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">ProfileExpression</span> 
                CreateProfile(<span style="color: blue;">string</span> profileName);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> CreateProfile(<span 
                    style="color: blue;">string</span> profileName,
                <span style="color: #2b91af;">Action</span>&lt;<span style="color: #2b91af;">ProfileExpression</span>&gt; 
                action);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Interception</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> 
                RegisterInterceptor(<span style="color: #2b91af;">TypeInterceptor</span> 
                interceptor);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">MatchedTypeInterceptor</span> 
                IfTypeMatches(<span style="color: #2b91af;">Predicate</span>&lt;<span 
                    style="color: #2b91af;">Type</span>&gt; match);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Type Scanning and Auto 
                Registration</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> Scan(<span 
                    style="color: #2b91af;">Action</span>&lt;<span style="color: #2b91af;">IAssemblyScanner</span>&gt; 
                action);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Controlling Setter 
                Injection Behavior</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                CreatePluginFamilyExpression</span>&lt;TPluginType&gt; 
                FillAllPropertiesOfType&lt;TPluginType&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> 
                SetAllProperties(<span style="color: #2b91af;">Action</span>&lt;<span 
                    style="color: #2b91af;">SetterConvention</span>&gt; action);</p>
        </div>
<!--EndFragment-->
<hr />

        <h2>Registering Types</h2>
        <p>The most time consuming part of using an IoC tool like StructureMap is creating 
            the configuration by specifying what types are to be created and how.&nbsp; 
            Another potentially time consuming activity is trouble shooting that 
            configuration for mistakes and/or trying to understand why the container is 
            behaving the way that it is.&nbsp; Because of the troubleshooting burden, 
            StructureMap moved away from Xml configuration and towards the programmatic 
            Registry DSL to cut down on errors by using &quot;compiler safe&quot; code for as much of 
            the configuration as possible.&nbsp; StructureMap departs from other .Net IoC 
            tools by putting a strong emphasis on a readable DSL for the configuration -- or 
            at least that was the goal.</p>
        
        <h4>Specifying the Default Instance for a PluginType</h4>
        <p>The most common usage of the Registry DSL is just specifying the default Instance 
            for a given PluginType.&nbsp; If the concrete type does not have any primitive 
            parameters (i.e., StructureMap can build it completely by using
            <a href="AutoWiring.htm">AutoWiring</a>), you can use this shortcut:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;}??\fs20 \par ??            ForRequestedType&lt;FluentNHibernate.\cf3 PersistenceModel\cf0 &gt;()\par ??                .TheDefaultIsConcreteType&lt;\cf3 DovetailPersistenceModel\cf0 &gt;();\par ??}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                ForRequestedType&lt;FluentNHibernate.<span style="color: #2b91af;">PersistenceModel</span>&gt;()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .TheDefaultIsConcreteType&lt;<span style="color: #2b91af;">DovetailPersistenceModel</span>&gt;();</p>
        </div>
<!--EndFragment-->
<p>The method above will throw an exception if the concrete class specified in 
    TheDefaultIsConcreteType&lt;T&gt;() has any primitive arguments (strings, numbers, 
    booleans) in its constructor function.</p>
        <p>In other cases, you might need to specify constructor arguments or build an 
            object in other ways than a constructor function.&nbsp; In that case, you need 
            to use something like this:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20                 \cf3 // In this case, we need to specify the value of "connectionString" argument to\par ??\cf0                 \cf3 // the constructor function\par ??\cf0                 x.ForRequestedType&lt;\cf4 DatabaseRepository\cf0 &gt;().Use&lt;\cf4 DatabaseRepository\cf0 &gt;()\par ??                    .WithCtorArg(\cf5 "connectionString"\cf0 ).EqualToAppSetting(\cf5 "connectionString"\cf0 );}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// In this case, we need to specify the value of 
                &quot;connectionString&quot; argument to</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// the constructor function</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForRequestedType&lt;<span style="color: #2b91af;">DatabaseRepository</span>&gt;().Use&lt;<span 
                    style="color: #2b91af;">DatabaseRepository</span>&gt;()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithCtorArg(<span style="color: #a31515;">&quot;connectionString&quot;</span>).EqualToAppSetting(<span 
                    style="color: #a31515;">&quot;connectionString&quot;</span>);</p>
        </div>
<!--EndFragment-->
<p>The expression trailing the call to 
    ForRequestedType&lt;T&gt;().TheDefault.Is.************* is an &quot;<a 
        href="../../InstanceExpression.htm">InstanceExpression</a>.&quot;&nbsp; The 
    InstanceExpression is reused in several places throughout the Registry DSL to 
    try to enforce a common user experience, reuse code, and enable easier 
    extensions to the Registry DSL.</p>
        <p>There is also a limited alternative to the InstanceExpression for times when you 
            cannot use the generic ForRequestedType&lt;T&gt;() method.&nbsp; For example, with 
            open generic types, you have to use this syntax:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20             \cf3 var\cf0  container = \cf3 new\cf0  \cf4 Container\cf0 (r =&gt;\par ??            \{\par ??                r.ForRequestedType(\cf3 typeof\cf0  (\cf4 IRepository\cf0 &lt;&gt;)).TheDefaultIsConcreteType(\cf3 typeof\cf0  (\cf4 OnlineRepository\cf0 &lt;&gt;));\par ??            \});}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> container = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">Container</span>(r =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                r.ForRequestedType(<span style="color: blue;">typeof</span> (<span 
                    style="color: #2b91af;">IRepository</span>&lt;&gt;)).TheDefaultIsConcreteType(<span 
                    style="color: blue;">typeof</span> (<span style="color: #2b91af;">OnlineRepository</span>&lt;&gt;));</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        </div>
<!--EndFragment-->
<p>See <a href="Generics.htm">Using Open Generic Types</a> for more information.</p>
        <hr />

        <h4>Specifying Additional Instances for a PluginType</h4>
        <p>The Registry DSL also supports adding additional named instances.&nbsp; You can 
            add one Instance at a time with the InstanceOf&lt;T&gt;() method, where T is the 
            PluginType.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;\red0\green128\blue0;}??\fs20             container = \cf3 new\cf0  \cf4 Container\cf0 (registry =&gt;\par ??            \{\par ??                registry.InstanceOf&lt;\cf4 Rule\cf0 &gt;().Is.OfConcreteType&lt;\cf4 ARule\cf0 &gt;().WithName(\cf5 "Alias"\cf0 );\par ??\par ??                \cf6 // Add an instance by specifying the ConcreteKey\par ??\cf0                 registry.InstanceOf&lt;\cf4 IWidget\cf0 &gt;()\par ??                    .Is.OfConcreteType&lt;\cf4 ColorWidget\cf0 &gt;()\par ??                    .WithName(\cf5 "Purple"\cf0 )\par ??                    .WithProperty(\cf5 "color"\cf0 ).EqualTo(\cf5 "Purple"\cf0 );\par ??\par ??                \cf6 // Specify a new Instance, override a dependency with a named instance\par ??\cf0                 registry.InstanceOf&lt;\cf4 Rule\cf0 &gt;().Is.OfConcreteType&lt;\cf4 WidgetRule\cf0 &gt;().WithName(\cf5 "RuleThatUsesMyInstance"\cf0 )\par ??                    .CtorDependency&lt;\cf4 IWidget\cf0 &gt;(\cf5 "widget"\cf0 ).Is(x =&gt; x.TheInstanceNamed(\cf5 "Purple"\cf0 ));\par ??            \});}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container =
                <span style="color: blue;">new</span> <span style="color: #2b91af;">Container</span>(registry 
                =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                registry.InstanceOf&lt;<span style="color: #2b91af;">Rule</span>&gt;().Is.OfConcreteType&lt;<span 
                    style="color: #2b91af;">ARule</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;Alias&quot;</span>);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// Add an instance by specifying the ConcreteKey</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                registry.InstanceOf&lt;<span style="color: #2b91af;">IWidget</span>&gt;()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .Is.OfConcreteType&lt;<span style="color: #2b91af;">ColorWidget</span>&gt;()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithName(<span style="color: #a31515;">&quot;Purple&quot;</span>)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithProperty(<span style="color: #a31515;">&quot;color&quot;</span>).EqualTo(<span 
                    style="color: #a31515;">&quot;Purple&quot;</span>);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// Specify a new Instance, override a dependency 
                with a named instance</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                registry.InstanceOf&lt;<span style="color: #2b91af;">Rule</span>&gt;().Is.OfConcreteType&lt;<span 
                    style="color: #2b91af;">WidgetRule</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;RuleThatUsesMyInstance&quot;</span>)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .CtorDependency&lt;<span style="color: #2b91af;">IWidget</span>&gt;(<span 
                    style="color: #a31515;">&quot;widget&quot;</span>).Is(x =&gt; x.TheInstanceNamed(<span 
                    style="color: #a31515;">&quot;Purple&quot;</span>));</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        </div>
<!--EndFragment-->
<p>The InstanceOf&lt;T&gt;().Is.******* method returns an <a href="InstanceExpression.htm">
    InstanceExpression</a>, so all possible types of Instances are available in this 
    syntax.</p>
        <p>If you cannot use the generic InstanceOf&lt;T&gt;() method, you can instead use 
            InstanceOf(Type):</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red0\green0\blue255;\red163\green21\blue21;}??\fs20             \cf3 IContainer\cf0  manager = \cf4 new\cf0  \cf3 Container\cf0 (r =&gt;\par ??            \{\par ??                r.InstanceOf(\cf4 typeof\cf0  (\cf3 IService\cf0 &lt;&gt;)).Is(\cf4 typeof\cf0  (\cf3 Service\cf0 &lt;&gt;)).WithName(\cf5 "Service1"\cf0 );\par ??                r.InstanceOf(\cf4 typeof\cf0  (\cf3 IService\cf0 &lt;&gt;)).Is(\cf4 typeof\cf0  (\cf3 Service2\cf0 &lt;&gt;)).WithName(\cf5 "Service2"\cf0 );\par ??\par ??                r.CreateProfile(\cf5 "1"\cf0 ).For(\cf4 typeof\cf0  (\cf3 IService\cf0 &lt;&gt;)).UseNamedInstance(\cf5 "Service1"\cf0 );\par ??                r.CreateProfile(\cf5 "2"\cf0 ).For(\cf4 typeof\cf0  (\cf3 IService\cf0 &lt;&gt;)).UseNamedInstance(\cf5 "Service2"\cf0 );\par ??            \});}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                IContainer</span> manager = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">Container</span>(r =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                r.InstanceOf(<span style="color: blue;">typeof</span> (<span 
                    style="color: #2b91af;">IService</span>&lt;&gt;)).Is(<span style="color: blue;">typeof</span> 
                (<span style="color: #2b91af;">Service</span>&lt;&gt;)).WithName(<span 
                    style="color: #a31515;">&quot;Service1&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                r.InstanceOf(<span style="color: blue;">typeof</span> (<span 
                    style="color: #2b91af;">IService</span>&lt;&gt;)).Is(<span style="color: blue;">typeof</span> 
                (<span style="color: #2b91af;">Service2</span>&lt;&gt;)).WithName(<span 
                    style="color: #a31515;">&quot;Service2&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        </div>
<!--EndFragment-->
<p>Finally, if you need to add multiple Instances of a PluginType at once, you can 
    use this syntax as a shortcut:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red0\green0\blue255;\red163\green21\blue21;}??\fs20             \cf3 IContainer\cf0  container = \cf4 new\cf0  \cf3 Container\cf0 (r =&gt; r.ForRequestedType&lt;\cf3 IAddTypes\cf0 &gt;().AddInstances(x =&gt;\par ??            \{\par ??                x.OfConcreteType&lt;\cf3 RedAddTypes\cf0 &gt;().WithName(\cf5 "Red"\cf0 );\par ??                x.OfConcreteType&lt;\cf3 GreenAddTypes\cf0 &gt;().WithName(\cf5 "Green"\cf0 );\par ??                x.OfConcreteType&lt;\cf3 BlueAddTypes\cf0 &gt;().WithName(\cf5 "Blue"\cf0 );\par ??                x.OfConcreteType&lt;\cf3 PurpleAddTypes\cf0 &gt;();\par ??            \}));}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                IContainer</span> container = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">Container</span>(r =&gt; r.ForRequestedType&lt;<span 
                    style="color: #2b91af;">IAddTypes</span>&gt;().AddInstances(x =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.OfConcreteType&lt;<span style="color: #2b91af;">RedAddTypes</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;Red&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.OfConcreteType&lt;<span style="color: #2b91af;">GreenAddTypes</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;Green&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.OfConcreteType&lt;<span style="color: #2b91af;">BlueAddTypes</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;Blue&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.OfConcreteType&lt;<span style="color: #2b91af;">PurpleAddTypes</span>&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }));</p>
        </div>
<!--EndFragment-->
<p>Each line in the <a href="http://martinfowler.com/dslwip/NestedClosure.html">Nested Closure</a> inside AddInstances() represents a 
    completely new Instance for that PluginType.&nbsp; In this case, the Nested 
    Closure acts on the <a href="InstanceExpression.htm">InstanceExpression</a>.</p>
        <p>&nbsp;</p>
        <p>The Instance &quot;WithName&quot; is not mandatory.&nbsp; If the name is not specified, 
            StructureMap uses a Guid string to identify the Instance.&nbsp; Do specify the 
            Name if you want to retrieve the object by Name or for more contextual 
            information in the diagnostics.</p>

        <hr />

        <h4>Setting the Scoping/Lifecycle for a PluginType</h4>
        <p>The Scope/Lifecycle of a PluginType can be set in the Registry DSL from either 
            the ForRequestedType&lt;T&gt;() or BuildInstancesOf&lt;T&gt;() method.&nbsp; All scoping 
            options are available from the CacheBy() method:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red0\green128\blue0;}??\fs20             \cf3 var\cf0  container = \cf3 new\cf0  \cf4 Container\cf0 (x =&gt;\par ??            \{\par ??                \cf5 // Scope IGateway as "ThreadLocal"\par ??\cf0                 x.ForRequestedType&lt;\cf4 IGateway\cf0 &gt;().CacheBy(\cf4 InstanceScope\cf0 .ThreadLocal);\par ??\par ??                \cf5 // Scope IService as "HttpSession"\par ??\cf0                 x.BuildInstancesOf&lt;\cf4 IService\cf0 &gt;().CacheBy(\cf4 InstanceScope\cf0 .HttpSession);\par ??            \});}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> container = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">Container</span>(x =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// Scope IGateway as &quot;ThreadLocal&quot;</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForRequestedType&lt;<span style="color: #2b91af;">IGateway</span>&gt;().CacheBy(<span 
                    style="color: #2b91af;">InstanceScope</span>.ThreadLocal);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// Scope IService as &quot;HttpSession&quot;</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.BuildInstancesOf&lt;<span style="color: #2b91af;">IService</span>&gt;().CacheBy(<span 
                    style="color: #2b91af;">InstanceScope</span>.HttpSession);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        </div>
<!--EndFragment-->
<p>There is also a shortcut method for specifying a PluginType as singletons:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red43\green145\blue175;}??\fs20             \cf3 // AsSingletons() is just a convenience method that means .CacheBy(InstanceScope.Singleton)\par ??\cf0             ForRequestedType&lt;\cf4 IEntityQueryRegistry\cf0 &gt;().TheDefaultIsConcreteType&lt;\cf4 EntityQueryRegistry\cf0 &gt;()\par ??                .AsSingletons();}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // AsSingletons() is just a convenience method that means 
                .CacheBy(InstanceScope.Singleton)</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ForRequestedType&lt;<span 
                    style="color: #2b91af;">IEntityQueryRegistry</span>&gt;().TheDefaultIsConcreteType&lt;<span 
                    style="color: #2b91af;">EntityQueryRegistry</span>&gt;()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .AsSingletons();</p>
        </div>
<!--EndFragment-->
<p>See <a href="Scoping.htm">Scoping and Lifecycle Management</a> for more 
    information.</p>

	    <hr />
	    
	    <a name="ConcreteTypes"></a><h2>Registering a &quot;Missing Instance&quot;</h2>
        <p>In some cases you may be able to intelligently build an object just by the name 
            of the object.&nbsp; StructureMap 2.5.2+ introduces a new feature called 
            &quot;Missing Instance&quot; that basically equates to &quot;if the Container doesn&#39;t recognize 
            the name in a call to Container.GetInstance&lt;T&gt;(name), use this specified 
            Instance to build the requested object instead of blowing up.&quot;&nbsp; If the 
            &quot;Missing Instance&quot; isn&#39;t specified, an unknown instance &quot;name&quot; passed into 
            Container.GetInstance&lt;T&gt;(name) will still throw an exception.</p>
        <p>Here&#39;s a simple example from the unit tests:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red0\green0\blue255;\red0\green128\blue0;\red163\green21\blue21;}??\fs20         [\cf3 Test\cf0 ]\par ??        \cf4 public\cf0  \cf4 void\cf0  configure_and_use_missing_instance()\par ??        \{\par ??            \cf5 // If a user should happen to ask for a Rule by name\par ??\cf0             \cf5 // that does not exist, StructureMap will use an Instance\par ??\cf0             \cf5 // that builds a "ColorRule" object using the \par ??\cf0             \cf5 // IContext.RequestedName property\par ??\cf0             \cf4 var\cf0  container = \cf4 new\cf0  \cf3 Container\cf0 (x =&gt;\par ??            \{\par ??                x.ForRequestedType&lt;\cf3 Rule\cf0 &gt;().MissingNamedInstanceIs\par ??                    .ConstructedBy(context =&gt; \cf4 new\cf0  \cf3 ColorRule\cf0 (context.RequestedName));\par ??            \});\par ??\par ??            container.GetInstance&lt;\cf3 Rule\cf0 &gt;(\cf6 "red"\cf0 ).ShouldBeOfType&lt;\cf3 ColorRule\cf0 &gt;().Color.ShouldEqual(\cf6 "red"\cf0 );\par ??            container.GetInstance&lt;\cf3 Rule\cf0 &gt;(\cf6 "green"\cf0 ).ShouldBeOfType&lt;\cf3 ColorRule\cf0 &gt;().Color.ShouldEqual(\cf6 "green"\cf0 );\par ??            container.GetInstance&lt;\cf3 Rule\cf0 &gt;(\cf6 "blue"\cf0 ).ShouldBeOfType&lt;\cf3 ColorRule\cf0 &gt;().Color.ShouldEqual(\cf6 "blue"\cf0 );\par ??        \}}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
                <span style="color: blue;">void</span> configure_and_use_missing_instance()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // If a user should happen to ask for a Rule by name</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // that does not exist, StructureMap will use an Instance</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // that builds a &quot;ColorRule&quot; object using the </span>
            </p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // IContext.RequestedName property</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> container = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">Container</span>(x =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForRequestedType&lt;<span style="color: #2b91af;">Rule</span>&gt;().MissingNamedInstanceIs</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .ConstructedBy(context =&gt; <span style="color: blue;">new</span>
                <span style="color: #2b91af;">ColorRule</span>(context.RequestedName));</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container.GetInstance&lt;<span 
                    style="color: #2b91af;">Rule</span>&gt;(<span style="color: #a31515;">&quot;red&quot;</span>).ShouldBeOfType&lt;<span 
                    style="color: #2b91af;">ColorRule</span>&gt;().Color.ShouldEqual(<span 
                    style="color: #a31515;">&quot;red&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container.GetInstance&lt;<span 
                    style="color: #2b91af;">Rule</span>&gt;(<span style="color: #a31515;">&quot;green&quot;</span>).ShouldBeOfType&lt;<span 
                    style="color: #2b91af;">ColorRule</span>&gt;().Color.ShouldEqual(<span 
                    style="color: #a31515;">&quot;green&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container.GetInstance&lt;<span 
                    style="color: #2b91af;">Rule</span>&gt;(<span style="color: #a31515;">&quot;blue&quot;</span>).ShouldBeOfType&lt;<span 
                    style="color: #2b91af;">ColorRule</span>&gt;().Color.ShouldEqual(<span 
                    style="color: #a31515;">&quot;blue&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
        </div>
<!--EndFragment-->
<p>&nbsp;</p>
        <hr />
        <h2>Configuring Concrete Types</h2>
        <p>Sometimes you may just want to work directly with a concrete type that needs some 
            sort of configuration or dependencies injected, but you don&#39;t need a separate 
            interface contract.&nbsp; Let&#39;s say that we&#39;re using this concrete class:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 DatabaseRepository\cf0  : \cf4 IRepository\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 readonly\cf0  \cf3 string\cf0  _connectionString;\par ??\par ??        \cf3 public\cf0  DatabaseRepository(\cf3 string\cf0  connectionString)\par ??        \{\par ??            _connectionString = connectionString;\par ??        \}\par ??    \}}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
                <span style="color: #2b91af;">DatabaseRepository</span> :
                <span style="color: #2b91af;">IRepository</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span>
                <span style="color: blue;">readonly</span> <span style="color: blue;">string</span> 
                _connectionString;</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> 
                DatabaseRepository(<span style="color: blue;">string</span> connectionString)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _connectionString = 
                connectionString;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
        </div>
<!--EndFragment-->
<p>All we want to do is request an instance of DatabaseRepository and let 
    StructureMap find the connection string from configuration, then use that to 
    build an instance of the DatabaseRepository class.&nbsp; We could register this 
    class like this:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20             \cf3 ObjectFactory\cf0 .Initialize(x =&gt;\par ??            \{\par ??                x.ForRequestedType&lt;\cf3 DatabaseRepository\cf0 &gt;().Use&lt;\cf3 DatabaseRepository\cf0 &gt;()\par ??                    .WithCtorArg(\cf4 "connectionString"\cf0 ).EqualToAppSetting(\cf4 "connectionString"\cf0 );\par ??            \});}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                ObjectFactory</span>.Initialize(x =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForRequestedType&lt;<span style="color: #2b91af;">DatabaseRepository</span>&gt;().Use&lt;<span 
                    style="color: #2b91af;">DatabaseRepository</span>&gt;()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithCtorArg(<span style="color: #a31515;">&quot;connectionString&quot;</span>).EqualToAppSetting(<span 
                    style="color: #a31515;">&quot;connectionString&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        </div>
<!--EndFragment-->
<p>With StructureMap 2.5+ we can make a minor shortcut and express the same 
    registration with the ForConcreteType&lt;T&gt;().Configure expression:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red163\green21\blue21;\red0\green128\blue0;\red0\green0\blue255;}??\fs20             \cf3 ObjectFactory\cf0 .Initialize(x =&gt;\par ??            \{\par ??                x.ForConcreteType&lt;\cf3 DatabaseRepository\cf0 &gt;().Configure\par ??                    .WithCtorArg(\cf4 "connectionString"\cf0 ).EqualToAppSetting(\cf4 "connectionString"\cf0 );\par ??            \});\par ??\par ??            \cf5 // Now, we can request an instance of DatabaseRepository, and\par ??\cf0             \cf5 // StructureMap knows to create a new object using the \par ??\cf0             \cf5 // connection string from the AppSettings section from the App.config\par ??\cf0             \cf5 // file\par ??\cf0             \cf6 var\cf0  repository = \cf3 ObjectFactory\cf0 .GetInstance&lt;\cf3 DatabaseRepository\cf0 &gt;();}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                ObjectFactory</span>.Initialize(x =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForConcreteType&lt;<span style="color: #2b91af;">DatabaseRepository</span>&gt;().Configure</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithCtorArg(<span style="color: #a31515;">&quot;connectionString&quot;</span>).EqualToAppSetting(<span 
                    style="color: #a31515;">&quot;connectionString&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // Now, we can request an instance of DatabaseRepository, and</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // StructureMap knows to create a new object using the </span>
            </p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // connection string from the AppSettings section from the App.config</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // file</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> repository = <span style="color: #2b91af;">ObjectFactory</span>.GetInstance&lt;<span 
                    style="color: #2b91af;">DatabaseRepository</span>&gt;();</p>
        </div>
<!--EndFragment-->
<p>This isn&#39;t that much of a savings in characters typed, but does seem to help with 
    legibility of the code.</p>
	    <hr />
	    
	    <h2>Working with Open Generic Types</h2>
   StructureMap supports open generic types.&nbsp; See <a href="Generics.htm">
            Using Open Generic Types</a> for more information about registering open generic 
            types.</p>
	    <hr />
	    
	    <h2>Auto Registration and Assembly ScanningScanning</h2>
        <p>The Registry DSL exposes the Scan() method to specify auto registration policies.&nbsp; 
            See <a href="ScanningAssemblies.htm">Auto Registration with Type Scanning</a> 
            for more information.</p>
	    <hr />
	    
	    <h2>Setter Injection Policies</h2>
        <p>The Registry DSL exposes the FillAllPropertiesOfType() method and the 
            SetAllProperties() methods to create policies for which setter properties of 
            concrete types will be mandatory properties that will always be injected by 
            StructureMap.&nbsp; See
            <a href="ConstructorAndSetterInjection.htm#SetterPolicies">Creating Policies for 
            Setter Injection</a> for more information.</p>
	    <hr />
	    
	    <h2>Interception</h2>
        <p>The Registry DSL exposes a couple methods for configuring interception policies.  See 
            <a href="Interception.htm">Interception</a> for more information.</p>
	    <hr />
	    
	    <h2>Creating a Profile</h2>
	    <p>The Registry DSL exposes methods for defining or adding to Profiles.&nbsp; See
            <a href="Profiles.htm">Profiles</a> for more information.</p>
	    <hr />
	    
	    <h2>Using the Registry DSL Directly in Initializationlization</h2>
        <p>The Container.Initialize() and Container.Configure() methods both support all of the Registry DSL methods.  It is not recommended that you use this functionality in larger systems, but it can be very handy for small systems or one off development activities.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20             \cf3 ObjectFactory\cf0 .Initialize(x =&gt;\par ??            \{\par ??                x.ForRequestedType&lt;\cf3 IRepository\cf0 &gt;().TheDefaultIsConcreteType&lt;\cf3 InMemoryRepository\cf0 &gt;();\par ??\par ??                x.ForRequestedType&lt;\cf3 IRepository\cf0 &gt;().AddInstances(y =&gt;\par ??                \{\par ??                    y.OfConcreteType&lt;\cf3 DatabaseRepository\cf0 &gt;().WithName(\cf4 "NorthAmerica"\cf0 )\par ??                        .WithCtorArg(\cf4 "connectionString"\cf0 ).EqualTo(\cf4 "database=NorthAmerica"\cf0 );\par ??\par ??                    y.OfConcreteType&lt;\cf3 DatabaseRepository\cf0 &gt;().WithName(\cf4 "Asia/Pacific"\cf0 )\par ??                        .WithCtorArg(\cf4 "connectionString"\cf0 ).EqualTo(\cf4 "database=AsiaPacific"\cf0 );\par ??\par ??                    y.ConstructedBy(() =&gt; \cf3 WeirdLegacyRepository\cf0 .Current).WithName(\cf4 "Weird"\cf0 );\par ??                \});\par ??            \});}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                ObjectFactory</span>.Initialize(x =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForRequestedType&lt;<span style="color: #2b91af;">IRepository</span>&gt;().TheDefaultIsConcreteType&lt;<span 
                    style="color: #2b91af;">InMemoryRepository</span>&gt;();</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForRequestedType&lt;<span style="color: #2b91af;">IRepository</span>&gt;().AddInstances(y 
                =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                y.OfConcreteType&lt;<span style="color: #2b91af;">DatabaseRepository</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;NorthAmerica&quot;</span>)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithCtorArg(<span style="color: #a31515;">&quot;connectionString&quot;</span>).EqualTo(<span 
                    style="color: #a31515;">&quot;database=NorthAmerica&quot;</span>);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                y.OfConcreteType&lt;<span style="color: #2b91af;">DatabaseRepository</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;Asia/Pacific&quot;</span>)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithCtorArg(<span style="color: #a31515;">&quot;connectionString&quot;</span>).EqualTo(<span 
                    style="color: #a31515;">&quot;database=AsiaPacific&quot;</span>);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                y.ConstructedBy(() =&gt; <span style="color: #2b91af;">WeirdLegacyRepository</span>.Current).WithName(<span 
                    style="color: #a31515;">&quot;Weird&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        </div>
<!--EndFragment-->
<hr />
	</body>
</html>